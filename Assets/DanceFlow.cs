using System.Collections.Generic;
using System.IO;
using Newtonsoft.Json;
using Shapes;
using Shapes.Lines;
using UnityEngine;

public class DanceFlow : MonoBehaviour
{
    List<string> jointLabels = new()
    {
        "Head_top", "Thorax", "R_Shoulder", "R_Elbow", "R_Wrist", "L_Shoulder", "L_Elbow", "L_Wrist", "R_Hip", "R_Knee",
        "R_Ankle", "L_Hip", "L_Knee", "L_Ankle", "Pelvis", "Spine", "Head", "R_Hand", "L_Hand", "R_Toe", "L_Toe"
    };
    
    void Start()
    {
        string filePath = Path.Combine(Application.streamingAssetsPath, "000.json");
        string jsonContent = File.ReadAllText(filePath);
        jsonContent =
            "[[[513.1578979492188, -654.5289916992188, 8170.244140625], [542.1716918945312, -384.6243591308594, 8251.73828125], [528.1845703125, -418.1884460449219, 8367.0947265625], [309.15301513671875, -421.45098876953125, 8469.015625], [108.04708099365234, -338.1878967285156, 8392.9345703125], [546.255859375, -358.5486755371094, 8105.45703125], [301.7343444824219, -279.3267822265625, 8114.67236328125], [64.08001708984375, -297.0507507324219, 8260.6689453125], [534.8648681640625, 99.58561706542969, 8504.1884765625], [520.5292358398438, 528.2880249023438, 8458.3212890625], [536.1170654296875, 907.0067138671875, 8448.150390625], [625.546142578125, 116.88163757324219, 8269.6005859375], [656.7998046875, 542.74658203125, 8286.5390625], [750.9680786132812, 924.9776611328125, 8336.0], [585.2490234375, 110.39044189453125, 8387.6484375], [574.0405883789062, -125.06256866455078, 8348.1650390625], [513.9863891601562, -487.39935302734375, 8215.6015625], [29.34892463684082, -323.5668640136719, 8387.064453125], [10.35901165008545, -290.12225341796875, 8271.591796875], [415.1273498535156, 940.1659545898438, 8474.009765625], [702.2980346679688, 1020.5678100585938, 8249.8837890625]], [[-1785.7332763671875, -202.65272521972656, 10777.94921875], [-1806.9024658203125, 36.686580657958984, 10911.470703125], [-1959.039794921875, 43.446258544921875, 10881.15625], [-1965.5614013671875, 314.57635498046875, 10764.1767578125], [-1802.3812255859375, 400.1427001953125, 10780.201171875], [-1646.3798828125, 28.317087173461914, 10941.03125], [-1582.369873046875, 291.1825866699219, 10925.490234375], [-1681.139404296875, 394.69281005859375, 10849.228515625], [-1919.2645263671875, 403.81390380859375, 11000.1337890625], [-1940.286376953125, 453.52716064453125, 10665.5322265625], [-1929.676513671875, 865.2078857421875, 10756.1796875], [-1748.62255859375, 392.6501159667969, 11106.2158203125], [-1528.0364990234375, 432.8566589355469, 10794.8173828125], [-1508.4813232421875, 859.9271240234375, 10845.80078125], [-1839.5299072265625, 397.91595458984375, 11056.5146484375], [-1852.7747802734375, 169.33084106445312, 11079.0888671875], [-1785.5860595703125, -45.06726837158203, 10828.755859375], [-1763.051513671875, 441.2360534667969, 10779.7099609375], [-1709.385009765625, 443.97357177734375, 10847.4580078125], [-1908.6207275390625, 907.9133911132812, 10639.7421875], [-1454.207275390625, 893.5518188476562, 10650.60546875]], [[-104.53144836425781, -589.1299438476562, 9223.396484375], [-25.003679275512695, -305.9801025390625, 9275.607421875], [6.020380973815918, -303.2478332519531, 9162.267578125], [43.689701080322266, -58.69911575317383, 8972.13671875], [27.9694766998291, -71.06437683105469, 9077.4111328125], [-69.53376007080078, -308.38043212890625, 9384.142578125], [-90.65206146240234, -116.41650390625, 9570.072265625], [-177.24081420898438, -49.33414840698242, 9597.4296875], [-95.3604965209961, 166.91192626953125, 9180.76953125], [-96.71212005615234, 601.63525390625, 9178.4169921875], [-89.30593872070312, 1010.8504028320312, 9172.7333984375], [-121.37239837646484, 167.00042724609375, 9419.8974609375], [-177.2291717529297, 614.7954711914062, 9358.8271484375], [-170.23182678222656, 988.7571411132812, 9323.9462890625], [-104.99983978271484, 169.67953491210938, 9296.4833984375], [-41.8071403503418, -75.92037963867188, 9306.6328125], [-32.51264953613281, -421.2406005859375, 9270.4677734375], [-33.11923599243164, -53.617523193359375, 9082.7138671875], [-167.6478729248047, -33.6069221496582, 9595.73046875], [13.362318992614746, 1083.2410888671875, 9140.41796875], [-86.40261840820312, 1044.14892578125, 9362.466796875]], [[-3049.52978515625, -137.97494506835938, 13515.306640625], [-2927.5703125, 18.16313362121582, 13621.4150390625], [-2957.61181640625, -46.802284240722656, 13620.248046875], [-2866.3564453125, 348.6297912597656, 13690.8994140625], [-2938.707275390625, 475.2793273925781, 13541.1318359375], [-2876.872314453125, 40.081790924072266, 13634.099609375], [-2841.713134765625, 381.54901123046875, 13615.2001953125], [-2970.829345703125, 499.3285827636719, 13508.71484375], [-3042.233642578125, 520.4166259765625, 13605.8984375], [-2783.435791015625, 587.6912231445312, 13601.17578125], [-2837.132080078125, 1137.1209716796875, 13602.8798828125], [-2967.34326171875, 530.726806640625, 13710.5732421875], [-2729.543212890625, 554.946044921875, 13463.2470703125], [-2817.90234375, 1103.9671630859375, 13599.3798828125], [-3001.6953125, 515.2047119140625, 13658.734375], [-2976.64453125, 211.3837432861328, 13694.12890625], [-2989.764404296875, -55.07594299316406, 13587.7431640625], [-2937.755126953125, 493.7609558105469, 13538.5263671875], [-3007.962158203125, 515.0394287109375, 13478.1376953125], [-2814.6611328125, 1224.6199951171875, 13504.904296875], [-2724.822265625, 1158.0040283203125, 13482.111328125]], [[193.90240478515625, -237.58900451660156, 13475.4365234375], [191.33035278320312, -69.71460723876953, 13556.1923828125], [59.95465087890625, -71.9624252319336, 13599.3818359375], [-20.714702606201172, 156.50437927246094, 13636.1318359375], [66.7616195678711, 227.48997497558594, 13556.923828125], [311.09332275390625, -75.52767181396484, 13512.3505859375], [379.5089111328125, 174.9989471435547, 13613.5771484375], [287.3698425292969, 233.39833068847656, 13450.0146484375], [37.96311950683594, 343.1476745605469, 13629.22265625], [239.72164916992188, 479.1475524902344, 13268.6328125], [258.2066650390625, 965.0044555664062, 13367.220703125], [278.3576354980469, 351.5262145996094, 13622.373046875], [257.3913879394531, 332.2510681152344, 13220.427734375], [29.68935775756836, 663.2173461914062, 13180.25390625], [148.08154296875, 345.96826171875, 13609.6162109375], [153.63832092285156, 137.6309356689453, 13683.390625], [185.60423278808594, -112.28490447998047, 13510.984375], [104.52288055419922, 269.3982849121094, 13492.3486328125], [238.35397338867188, 262.6697998046875, 13410.28515625], [260.015869140625, 1006.0987548828125, 13207.646484375], [7.180119037628174, 694.6901245117188, 13063.267578125]]]";

        List<List<List<float>>> poseList = JsonConvert.DeserializeObject<List<List<List<float>>>>(jsonContent);

        List<List<Polygon>> allDancers = new();
        foreach (List<List<float>> outerList in poseList)
        {
            List<Polygon> poseJoints = new();
            allDancers.Add(poseJoints);
            foreach (List<float> innerList in outerList)
            {
                Polygon tetra = Instantiate(PolygonFactory.Instance.tetra);
                tetra.gameObject.SetActive(true);
                tetra.transform.SetParent(transform, false);
                tetra.transform.position =
                    new Vector3(innerList[0], -innerList[1], innerList[2]) / 100f; // convert from cm to m and flip y
                tetra.transform.localScale = Vector3.one * .2f;
                poseJoints.Add(tetra);
            }
        }

        List<StaticLink> allLinks = new();
        foreach (List<Polygon> joints in allDancers)
        {
            allLinks.Add(LinkFromTo(0, 16, joints));
            allLinks.Add(LinkFromTo(16, 1, joints));
            allLinks.Add(LinkFromTo(1, 15, joints));
            allLinks.Add(LinkFromTo(15, 14, joints));
            allLinks.Add(LinkFromTo(14, 8, joints));
            allLinks.Add(LinkFromTo(14, 11, joints));
            allLinks.Add(LinkFromTo(8, 9, joints));
            allLinks.Add(LinkFromTo(9, 10, joints));
            allLinks.Add(LinkFromTo(10, 19, joints));
            allLinks.Add(LinkFromTo(11, 12, joints));
            allLinks.Add(LinkFromTo(12, 13, joints));
            allLinks.Add(LinkFromTo(13, 20, joints));
            allLinks.Add(LinkFromTo(1, 2, joints));
            allLinks.Add(LinkFromTo(2, 3, joints));
            allLinks.Add(LinkFromTo(3, 4, joints));
            allLinks.Add(LinkFromTo(4, 17, joints));
            allLinks.Add(LinkFromTo(1, 5, joints));
            allLinks.Add(LinkFromTo(5, 6, joints));
            allLinks.Add(LinkFromTo(6, 7, joints));
            allLinks.Add(LinkFromTo(7, 18, joints));
        }

        foreach (StaticLink staticLink in allLinks)
        {
            staticLink.UpdateLink();
        }
    }

    StaticLink LinkFromTo(int index1, int index2, IReadOnlyList<Polygon> joints)
    {
        StaticLink staticLink = Instantiate(StaticLink.prototypeStaticLink);
        staticLink.gameObject.SetActive(true);
        staticLink.transform.SetParent(transform, false);
        staticLink.from = joints[0].transform;
        staticLink.LinkFromTo(joints[index1].transform, joints[index2].transform);
        return staticLink;
    }
}